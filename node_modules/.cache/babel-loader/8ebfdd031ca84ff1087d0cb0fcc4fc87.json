{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawNeedle = void 0;\nvar _d = require(\"d3\");\nvar _utils = require(\"./utils\");\n\n//If 'resize' is true then the animation does not play\nvar drawNeedle = function drawNeedle(resize, prevProps, props, width, needle, container, outerRadius, g) {\n  var percent = props.percent,\n    needleColor = props.needleColor,\n    needleBaseColor = props.needleBaseColor,\n    hideText = props.hideText,\n    animate = props.animate,\n    needleScale = props.needleScale,\n    textComponent = props.textComponent;\n  var needleRadius = 15 * (width.current / 500),\n    // Make the needle radius responsive\n    centerPoint = [0, -needleRadius / 2]; //Remove the old stuff\n\n  needle.current.selectAll(\"*\").remove(); //Translate the needle starting point to the middle of the arc\n\n  needle.current.attr(\"transform\", \"translate(\" + outerRadius.current + \", \" + outerRadius.current + \")\"); //Draw the triangle\n  //let pathStr = `M ${leftPoint[0]} ${leftPoint[1]} L ${topPoint[0]} ${topPoint[1]} L ${rightPoint[0]} ${rightPoint[1]}`;\n\n  var prevPercent = prevProps ? prevProps.percent : 0;\n  var pathStr = (0, _utils.calculateRotation)(prevPercent || percent, outerRadius, width, needleScale);\n  needle.current.append(\"path\").attr(\"d\", pathStr).attr(\"fill\", needleColor); //Add a circle at the bottom of needle\n\n  needle.current.append(\"circle\").attr(\"cx\", centerPoint[0]).attr(\"cy\", centerPoint[1]).attr(\"r\", needleRadius).attr(\"fill\", needleBaseColor);\n  if (!hideText && !textComponent) {\n    (0, _utils.addText)(percent, props, outerRadius, width, g);\n  } //Rotate the needle\n\n  if (!resize && animate) {\n    needle.current.transition().delay(props.animDelay).ease(_d.easeElastic).duration(props.animateDuration).tween(\"progress\", function () {\n      var currentPercent = (0, _d.interpolateNumber)(prevPercent, percent);\n      return function (percentOfPercent) {\n        var progress = currentPercent(percentOfPercent);\n        return container.current.select(\".needle path\").attr(\"d\", (0, _utils.calculateRotation)(progress, outerRadius, width, needleScale));\n      };\n    });\n  } else {\n    container.current.select(\".needle path\").attr(\"d\", (0, _utils.calculateRotation)(percent, outerRadius, width, needleScale));\n  }\n};\nexports.drawNeedle = drawNeedle;","map":{"version":3,"names":["Object","defineProperty","exports","value","drawNeedle","_d","require","_utils","resize","prevProps","props","width","needle","container","outerRadius","g","percent","needleColor","needleBaseColor","hideText","animate","needleScale","textComponent","needleRadius","current","centerPoint","selectAll","remove","attr","prevPercent","pathStr","calculateRotation","append","addText","transition","delay","animDelay","ease","easeElastic","duration","animateDuration","tween","currentPercent","interpolateNumber","percentOfPercent","progress","select"],"sources":["/home/project/node_modules/react-gauge-chart/dist/GaugeChart/drawNeedle.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawNeedle = void 0;\n\nvar _d = require(\"d3\");\n\nvar _utils = require(\"./utils\");\n\n//If 'resize' is true then the animation does not play\nvar drawNeedle = function drawNeedle(resize, prevProps, props, width, needle, container, outerRadius, g) {\n  var percent = props.percent,\n      needleColor = props.needleColor,\n      needleBaseColor = props.needleBaseColor,\n      hideText = props.hideText,\n      animate = props.animate,\n      needleScale = props.needleScale,\n      textComponent = props.textComponent;\n  var needleRadius = 15 * (width.current / 500),\n      // Make the needle radius responsive\n  centerPoint = [0, -needleRadius / 2]; //Remove the old stuff\n\n  needle.current.selectAll(\"*\").remove(); //Translate the needle starting point to the middle of the arc\n\n  needle.current.attr(\"transform\", \"translate(\" + outerRadius.current + \", \" + outerRadius.current + \")\"); //Draw the triangle\n  //let pathStr = `M ${leftPoint[0]} ${leftPoint[1]} L ${topPoint[0]} ${topPoint[1]} L ${rightPoint[0]} ${rightPoint[1]}`;\n\n  var prevPercent = prevProps ? prevProps.percent : 0;\n  var pathStr = (0, _utils.calculateRotation)(prevPercent || percent, outerRadius, width, needleScale);\n  needle.current.append(\"path\").attr(\"d\", pathStr).attr(\"fill\", needleColor); //Add a circle at the bottom of needle\n\n  needle.current.append(\"circle\").attr(\"cx\", centerPoint[0]).attr(\"cy\", centerPoint[1]).attr(\"r\", needleRadius).attr(\"fill\", needleBaseColor);\n\n  if (!hideText && !textComponent) {\n    (0, _utils.addText)(percent, props, outerRadius, width, g);\n  } //Rotate the needle\n\n\n  if (!resize && animate) {\n    needle.current.transition().delay(props.animDelay).ease(_d.easeElastic).duration(props.animateDuration).tween(\"progress\", function () {\n      var currentPercent = (0, _d.interpolateNumber)(prevPercent, percent);\n      return function (percentOfPercent) {\n        var progress = currentPercent(percentOfPercent);\n        return container.current.select(\".needle path\").attr(\"d\", (0, _utils.calculateRotation)(progress, outerRadius, width, needleScale));\n      };\n    });\n  } else {\n    container.current.select(\".needle path\").attr(\"d\", (0, _utils.calculateRotation)(percent, outerRadius, width, needleScale));\n  }\n};\n\nexports.drawNeedle = drawNeedle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}