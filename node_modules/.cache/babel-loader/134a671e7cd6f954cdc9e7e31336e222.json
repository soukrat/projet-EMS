{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setArcData = exports.addText = exports.calculateRotation = exports.updateDimensions = exports.centerGraph = exports.calculateRadius = void 0;\nvar _d = require(\"d3\");\nvar calculateRadius = function calculateRadius(width, height, outerRadius, margin, g) {\n  //The radius needs to be constrained by the containing div\n  //Since it is a half circle we are dealing with the height of the div\n  //Only needs to be half of the width, because the width needs to be 2 * radius\n  //For the whole arc to fit\n  //First check if it is the width or the height that is the \"limiting\" dimension\n  if (width.current < 2 * height.current) {\n    //Then the width limits the size of the chart\n    //Set the radius to the width - the horizontal margins\n    outerRadius.current = (width.current - margin.current.left - margin.current.right) / 2;\n  } else {\n    outerRadius.current = height.current - margin.current.top - margin.current.bottom;\n  }\n  centerGraph(width, g, outerRadius, margin);\n}; //Calculates new margins to make the graph centered\n\nexports.calculateRadius = calculateRadius;\nvar centerGraph = function centerGraph(width, g, outerRadius, margin) {\n  margin.current.left = width.current / 2 - outerRadius.current + margin.current.right;\n  g.current.attr(\"transform\", \"translate(\" + margin.current.left + \", \" + margin.current.top + \")\");\n};\nexports.centerGraph = centerGraph;\nvar updateDimensions = function updateDimensions(props, container, margin, width, height) {\n  //TODO: Fix so that the container is included in the component\n  var marginInPercent = props.marginInPercent;\n  var divDimensions = container.current.node().getBoundingClientRect(),\n    divWidth = divDimensions.width,\n    divHeight = divDimensions.height; //Set the new width and horizontal margins\n\n  margin.current.left = divWidth * marginInPercent;\n  margin.current.right = divWidth * marginInPercent;\n  width.current = divWidth - margin.current.left - margin.current.right;\n  margin.current.top = divHeight * marginInPercent;\n  margin.current.bottom = divHeight * marginInPercent;\n  height.current = width.current / 2 - margin.current.top - margin.current.bottom; //height.current = divHeight - margin.current.top - margin.current.bottom;\n};\nexports.updateDimensions = updateDimensions;\nvar calculateRotation = function calculateRotation(percent, outerRadius, width, needleScale) {\n  var needleLength = outerRadius.current * needleScale,\n    //TODO: Maybe it should be specified as a percentage of the arc radius?\n    needleRadius = 15 * (width.current / 500),\n    theta = percentToRad(percent),\n    centerPoint = [0, -needleRadius / 2],\n    topPoint = [centerPoint[0] - needleLength * Math.cos(theta), centerPoint[1] - needleLength * Math.sin(theta)],\n    leftPoint = [centerPoint[0] - needleRadius * Math.cos(theta - Math.PI / 2), centerPoint[1] - needleRadius * Math.sin(theta - Math.PI / 2)],\n    rightPoint = [centerPoint[0] - needleRadius * Math.cos(theta + Math.PI / 2), centerPoint[1] - needleRadius * Math.sin(theta + Math.PI / 2)];\n  var pathStr = \"M \".concat(leftPoint[0], \" \").concat(leftPoint[1], \" L \").concat(topPoint[0], \" \").concat(topPoint[1], \" L \").concat(rightPoint[0], \" \").concat(rightPoint[1]);\n  return pathStr;\n}; //Adds text undeneath the graft to display which percentage is the current one\n\nexports.calculateRotation = calculateRotation;\nvar addText = function addText(percentage, props, outerRadius, width, g) {\n  var formatTextValue = props.formatTextValue,\n    fontSize = props.fontSize;\n  var textPadding = 20;\n  var text = formatTextValue ? formatTextValue(floatingNumber(percentage)) : floatingNumber(percentage) + \"%\";\n  g.current.append(\"g\").attr(\"class\", \"text-group\").attr(\"transform\", \"translate(\".concat(outerRadius.current, \", \").concat(outerRadius.current / 2 + textPadding, \")\")).append(\"text\").text(text) // this computation avoid text overflow. When formatted value is over 10 characters, we should reduce font size\n  .style(\"font-size\", function () {\n    return fontSize ? fontSize : \"\".concat(width.current / 11 / (text.length > 10 ? text.length / 10 : 1), \"px\");\n  }).style(\"fill\", props.textColor).style(\"text-anchor\", \"middle\");\n}; // This function update arc's datas when component is mounting or when one of arc's props is updated\n\nexports.addText = addText;\nvar setArcData = function setArcData(props, nbArcsToDisplay, colorArray, arcData) {\n  // We have to make a decision about number of arcs to display\n  // If arcsLength is setted, we choose arcsLength length instead of nrOfLevels\n  nbArcsToDisplay.current = props.arcsLength ? props.arcsLength.length : props.nrOfLevels; //Check if the number of colors equals the number of levels\n  //Otherwise make an interpolation\n\n  if (nbArcsToDisplay.current === props.colors.length) {\n    colorArray.current = props.colors;\n  } else {\n    colorArray.current = getColors(props, nbArcsToDisplay);\n  } //The data that is used to create the arc\n  // Each arc could have hiw own value width arcsLength prop\n\n  arcData.current = [];\n  for (var i = 0; i < nbArcsToDisplay.current; i++) {\n    var arcDatum = {\n      value: props.arcsLength && props.arcsLength.length > i ? props.arcsLength[i] : 1,\n      color: colorArray.current[i]\n    };\n    arcData.current.push(arcDatum);\n  }\n}; //Depending on the number of levels in the chart\n//This function returns the same number of colors\n\nexports.setArcData = setArcData;\nvar getColors = function getColors(props, nbArcsToDisplay) {\n  var colors = props.colors;\n  var colorScale = (0, _d.scaleLinear)().domain([1, nbArcsToDisplay.current]).range([colors[0], colors[colors.length - 1]]) //Use the first and the last color as range\n  .interpolate(_d.interpolateHsl);\n  var colorArray = [];\n  for (var i = 1; i <= nbArcsToDisplay.current; i++) {\n    colorArray.push(colorScale(i));\n  }\n  return colorArray;\n};\nvar floatingNumber = function floatingNumber(value) {\n  var maxDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return Math.round(value * 100 * Math.pow(10, maxDigits)) / Math.pow(10, maxDigits);\n}; //Returns the angle (in rad) for the given 'percent' value where percent = 1 means 100% and is 180 degree angle\n\nvar percentToRad = function percentToRad(percent) {\n  return percent * Math.PI;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","setArcData","addText","calculateRotation","updateDimensions","centerGraph","calculateRadius","_d","require","width","height","outerRadius","margin","g","current","left","right","top","bottom","attr","props","container","marginInPercent","divDimensions","node","getBoundingClientRect","divWidth","divHeight","percent","needleScale","needleLength","needleRadius","theta","percentToRad","centerPoint","topPoint","Math","cos","sin","leftPoint","PI","rightPoint","pathStr","concat","percentage","formatTextValue","fontSize","textPadding","text","floatingNumber","append","style","length","textColor","nbArcsToDisplay","colorArray","arcData","arcsLength","nrOfLevels","colors","getColors","i","arcDatum","color","push","colorScale","scaleLinear","domain","range","interpolate","interpolateHsl","maxDigits","arguments","undefined","round","pow"],"sources":["/home/project/node_modules/react-gauge-chart/dist/GaugeChart/utils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setArcData = exports.addText = exports.calculateRotation = exports.updateDimensions = exports.centerGraph = exports.calculateRadius = void 0;\n\nvar _d = require(\"d3\");\n\nvar calculateRadius = function calculateRadius(width, height, outerRadius, margin, g) {\n  //The radius needs to be constrained by the containing div\n  //Since it is a half circle we are dealing with the height of the div\n  //Only needs to be half of the width, because the width needs to be 2 * radius\n  //For the whole arc to fit\n  //First check if it is the width or the height that is the \"limiting\" dimension\n  if (width.current < 2 * height.current) {\n    //Then the width limits the size of the chart\n    //Set the radius to the width - the horizontal margins\n    outerRadius.current = (width.current - margin.current.left - margin.current.right) / 2;\n  } else {\n    outerRadius.current = height.current - margin.current.top - margin.current.bottom;\n  }\n\n  centerGraph(width, g, outerRadius, margin);\n}; //Calculates new margins to make the graph centered\n\n\nexports.calculateRadius = calculateRadius;\n\nvar centerGraph = function centerGraph(width, g, outerRadius, margin) {\n  margin.current.left = width.current / 2 - outerRadius.current + margin.current.right;\n  g.current.attr(\"transform\", \"translate(\" + margin.current.left + \", \" + margin.current.top + \")\");\n};\n\nexports.centerGraph = centerGraph;\n\nvar updateDimensions = function updateDimensions(props, container, margin, width, height) {\n  //TODO: Fix so that the container is included in the component\n  var marginInPercent = props.marginInPercent;\n  var divDimensions = container.current.node().getBoundingClientRect(),\n      divWidth = divDimensions.width,\n      divHeight = divDimensions.height; //Set the new width and horizontal margins\n\n  margin.current.left = divWidth * marginInPercent;\n  margin.current.right = divWidth * marginInPercent;\n  width.current = divWidth - margin.current.left - margin.current.right;\n  margin.current.top = divHeight * marginInPercent;\n  margin.current.bottom = divHeight * marginInPercent;\n  height.current = width.current / 2 - margin.current.top - margin.current.bottom; //height.current = divHeight - margin.current.top - margin.current.bottom;\n};\n\nexports.updateDimensions = updateDimensions;\n\nvar calculateRotation = function calculateRotation(percent, outerRadius, width, needleScale) {\n  var needleLength = outerRadius.current * needleScale,\n      //TODO: Maybe it should be specified as a percentage of the arc radius?\n  needleRadius = 15 * (width.current / 500),\n      theta = percentToRad(percent),\n      centerPoint = [0, -needleRadius / 2],\n      topPoint = [centerPoint[0] - needleLength * Math.cos(theta), centerPoint[1] - needleLength * Math.sin(theta)],\n      leftPoint = [centerPoint[0] - needleRadius * Math.cos(theta - Math.PI / 2), centerPoint[1] - needleRadius * Math.sin(theta - Math.PI / 2)],\n      rightPoint = [centerPoint[0] - needleRadius * Math.cos(theta + Math.PI / 2), centerPoint[1] - needleRadius * Math.sin(theta + Math.PI / 2)];\n  var pathStr = \"M \".concat(leftPoint[0], \" \").concat(leftPoint[1], \" L \").concat(topPoint[0], \" \").concat(topPoint[1], \" L \").concat(rightPoint[0], \" \").concat(rightPoint[1]);\n  return pathStr;\n}; //Adds text undeneath the graft to display which percentage is the current one\n\n\nexports.calculateRotation = calculateRotation;\n\nvar addText = function addText(percentage, props, outerRadius, width, g) {\n  var formatTextValue = props.formatTextValue,\n      fontSize = props.fontSize;\n  var textPadding = 20;\n  var text = formatTextValue ? formatTextValue(floatingNumber(percentage)) : floatingNumber(percentage) + \"%\";\n  g.current.append(\"g\").attr(\"class\", \"text-group\").attr(\"transform\", \"translate(\".concat(outerRadius.current, \", \").concat(outerRadius.current / 2 + textPadding, \")\")).append(\"text\").text(text) // this computation avoid text overflow. When formatted value is over 10 characters, we should reduce font size\n  .style(\"font-size\", function () {\n    return fontSize ? fontSize : \"\".concat(width.current / 11 / (text.length > 10 ? text.length / 10 : 1), \"px\");\n  }).style(\"fill\", props.textColor).style(\"text-anchor\", \"middle\");\n}; // This function update arc's datas when component is mounting or when one of arc's props is updated\n\n\nexports.addText = addText;\n\nvar setArcData = function setArcData(props, nbArcsToDisplay, colorArray, arcData) {\n  // We have to make a decision about number of arcs to display\n  // If arcsLength is setted, we choose arcsLength length instead of nrOfLevels\n  nbArcsToDisplay.current = props.arcsLength ? props.arcsLength.length : props.nrOfLevels; //Check if the number of colors equals the number of levels\n  //Otherwise make an interpolation\n\n  if (nbArcsToDisplay.current === props.colors.length) {\n    colorArray.current = props.colors;\n  } else {\n    colorArray.current = getColors(props, nbArcsToDisplay);\n  } //The data that is used to create the arc\n  // Each arc could have hiw own value width arcsLength prop\n\n\n  arcData.current = [];\n\n  for (var i = 0; i < nbArcsToDisplay.current; i++) {\n    var arcDatum = {\n      value: props.arcsLength && props.arcsLength.length > i ? props.arcsLength[i] : 1,\n      color: colorArray.current[i]\n    };\n    arcData.current.push(arcDatum);\n  }\n}; //Depending on the number of levels in the chart\n//This function returns the same number of colors\n\n\nexports.setArcData = setArcData;\n\nvar getColors = function getColors(props, nbArcsToDisplay) {\n  var colors = props.colors;\n  var colorScale = (0, _d.scaleLinear)().domain([1, nbArcsToDisplay.current]).range([colors[0], colors[colors.length - 1]]) //Use the first and the last color as range\n  .interpolate(_d.interpolateHsl);\n  var colorArray = [];\n\n  for (var i = 1; i <= nbArcsToDisplay.current; i++) {\n    colorArray.push(colorScale(i));\n  }\n\n  return colorArray;\n};\n\nvar floatingNumber = function floatingNumber(value) {\n  var maxDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return Math.round(value * 100 * Math.pow(10, maxDigits)) / Math.pow(10, maxDigits);\n}; //Returns the angle (in rad) for the given 'percent' value where percent = 1 means 100% and is 180 degree angle\n\n\nvar percentToRad = function percentToRad(percent) {\n  return percent * Math.PI;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}