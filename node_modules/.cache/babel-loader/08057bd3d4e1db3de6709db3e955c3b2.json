{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\nvar _react = require(\"react\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar isDeepEquals = function isDeepEquals(toCompare, reference) {\n  return (0, _isEqual.default)(toCompare, reference);\n};\nvar useDeepCompareMemo = function useDeepCompareMemo(dependencies) {\n  var ref = (0, _react.useRef)(null);\n  if (isDeepEquals(dependencies, ref.current)) {\n    ref.current = dependencies;\n  }\n  return ref.current;\n}; // this function compares deeply new dependencies with old one\n// It works like useEffect but we are using isEqual from lodash to compares deeply\n\nvar useDeepCompareEffect = function useDeepCompareEffect(callback, dependencies) {\n  (0, _react.useEffect)(callback, [useDeepCompareMemo(dependencies), callback]);\n};\nvar _default = useDeepCompareEffect;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_isEqual","_interopRequireDefault","require","_react","obj","__esModule","isDeepEquals","toCompare","reference","useDeepCompareMemo","dependencies","ref","useRef","current","useDeepCompareEffect","callback","useEffect","_default"],"sources":["/home/project/node_modules/react-gauge-chart/dist/GaugeChart/customHooks.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _react = require(\"react\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar isDeepEquals = function isDeepEquals(toCompare, reference) {\n  return (0, _isEqual.default)(toCompare, reference);\n};\n\nvar useDeepCompareMemo = function useDeepCompareMemo(dependencies) {\n  var ref = (0, _react.useRef)(null);\n\n  if (isDeepEquals(dependencies, ref.current)) {\n    ref.current = dependencies;\n  }\n\n  return ref.current;\n}; // this function compares deeply new dependencies with old one\n// It works like useEffect but we are using isEqual from lodash to compares deeply\n\n\nvar useDeepCompareEffect = function useDeepCompareEffect(callback, dependencies) {\n  (0, _react.useEffect)(callback, [useDeepCompareMemo(dependencies), callback]);\n};\n\nvar _default = useDeepCompareEffect;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAExB,IAAIC,QAAQ,GAAGC,sBAAsB,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAEhE,IAAIC,MAAM,GAAGD,OAAO,CAAC,OAAO,CAAC;AAE7B,SAASD,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEL,OAAO,EAAEK;EAAI,CAAC;AAAE;AAE9F,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAACC,SAAS,EAAEC,SAAS,EAAE;EAC7D,OAAO,CAAC,CAAC,EAAER,QAAQ,CAACD,OAAO,EAAEQ,SAAS,EAAEC,SAAS,CAAC;AACpD,CAAC;AAED,IAAIC,kBAAkB,GAAG,SAASA,kBAAkBA,CAACC,YAAY,EAAE;EACjE,IAAIC,GAAG,GAAG,CAAC,CAAC,EAAER,MAAM,CAACS,MAAM,EAAE,IAAI,CAAC;EAElC,IAAIN,YAAY,CAACI,YAAY,EAAEC,GAAG,CAACE,OAAO,CAAC,EAAE;IAC3CF,GAAG,CAACE,OAAO,GAAGH,YAAY;EAC5B;EAEA,OAAOC,GAAG,CAACE,OAAO;AACpB,CAAC,CAAC,CAAC;AACH;;AAGA,IAAIC,oBAAoB,GAAG,SAASA,oBAAoBA,CAACC,QAAQ,EAAEL,YAAY,EAAE;EAC/E,CAAC,CAAC,EAAEP,MAAM,CAACa,SAAS,EAAED,QAAQ,EAAE,CAACN,kBAAkB,CAACC,YAAY,CAAC,EAAEK,QAAQ,CAAC,CAAC;AAC/E,CAAC;AAED,IAAIE,QAAQ,GAAGH,oBAAoB;AACnCjB,OAAO,CAACE,OAAO,GAAGkB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script"}